/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyectopichardo;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import org.json.JSONObject;
import org.json.JSONArray;
import java.util.Calendar;
import java.text.SimpleDateFormat;

/**
 *
 * @author oem
 */
public class ConsultaLibros extends javax.swing.JFrame {

    /**
     * Creates new form ConsultaLibros
     */
    public ConsultaLibros() {
        initComponents();
pintarTabla();
        jComboBox1.removeAllItems(); // Eliminar cualquier valor predeterminado
        jComboBox1.addItem("Aventura");
        jComboBox1.addItem("Novelas");
        jComboBox1.addItem("Ciencia Ficción");
        jComboBox1.addItem("Paranormal");
        jComboBox1.addItem("Comedia");
        jComboBox1.addItem("Fecha");
        
        
        

    }
    private Libros libroSeleccionado;
    private void pintarTabla(){
        String cabeceras[] = {"Título","Autor","Género","Precio","Stock","Fecha"};
    
    DefaultTableModel t = new DefaultTableModel(new String[]{"Título", "Autor", "Género", "Precio", "Stock", "Fecha"}, ProyectoPichardo.getLibros().size());
        jTable1.setModel(t);
        TableModel tabla = jTable1.getModel();
        for (int i = 0; i < ProyectoPichardo.getLibros().size(); i++) {
            Libros iLibro = ProyectoPichardo.getLibros().get(i);
            tabla.setValueAt(iLibro.titulo, i, 0);
            tabla.setValueAt(iLibro.autor, i, 1);
            tabla.setValueAt(iLibro.genero, i, 2);
            tabla.setValueAt(iLibro.precio, i, 3);
            tabla.setValueAt(iLibro.stock, i, 4);
            tabla.setValueAt(iLibro.fecha != null ? iLibro.fecha.getTime().toString() : "Sin fecha", i, 5);
        }
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton6 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Cerrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Titulo");

        jLabel2.setText("Autor");

        jLabel3.setText("Genero");

        jLabel4.setText("Precio");

        jLabel5.setText("Stock");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton6.setText("Exportar Libros a JSON");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton9.setText("Cargar JSON a Libros");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton2.setText("Borrar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Modificar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Guardar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Agregar a Venta");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton7.setText("Cargar CSV a libros");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Cargar libros a CSV");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField2))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField4)))
                        .addGap(151, 151, 151))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(19, 19, 19))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton9)
                            .addComponent(jButton6)
                            .addComponent(jButton2)
                            .addComponent(jButton3)
                            .addComponent(jButton4)
                            .addComponent(jButton5)
                            .addComponent(jButton7)
                            .addComponent(jButton8))
                        .addContainerGap(90, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jButton1))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9)
                        .addGap(191, 191, 191))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
         JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Guardar archivo JSON");
    
    int seleccion = fileChooser.showSaveDialog(this);

    if (seleccion == JFileChooser.APPROVE_OPTION) {
        File archivo = fileChooser.getSelectedFile();

        // Asegurar que tenga extensión .json
        if (!archivo.getName().toLowerCase().endsWith(".json")) {
            archivo = new File(archivo.getAbsolutePath() + ".json");
        }

        org.json.JSONArray librosArray = new org.json.JSONArray();

        for (Libros libro : ProyectoPichardo.getLibros()) {
            org.json.JSONObject obj = new org.json.JSONObject();
            obj.put("titulo", libro.titulo);
            obj.put("autor", libro.autor);
            obj.put("precio", libro.precio);
            obj.put("stock", libro.stock);
            obj.put("genero", libro.genero);
            obj.put("fecha", libro.fecha.getTime().toString());

            if (libro.fecha != null) {
    obj.put("fecha", libro.fecha.getTimeInMillis());
} else {
    // ✅ Evita el null metiendo la fecha actual
    obj.put("fecha", Calendar.getInstance().getTimeInMillis());
    libro.fecha = Calendar.getInstance(); // también la rellena en memoria
}
            
            librosArray.put(obj);
        }

        try (FileWriter writer = new FileWriter(archivo)) {
            writer.write(librosArray.toString(4)); // Indentado con 4 espacios
            writer.flush();
            JOptionPane.showMessageDialog(this, "Libros exportados a JSON con éxito.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al guardar el archivo JSON: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        LecturaLibrosJSON.cargarLibrosDesdeJSON();
    pintarTabla(); // Refrescar la tabla
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int borrar = jTable1.getSelectedRow();
    
    if (borrar > -1) { // Si se seleccionó una fila
        if (JOptionPane.showConfirmDialog(this, "¿Está seguro de eliminar este libro?") == 0) {
            ProyectoPichardo.getLibros().remove(borrar);
            pintarTabla(); // Actualizar la tabla después de eliminar
            JOptionPane.showMessageDialog(this, "Libro eliminado correctamente.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Seleccione un libro para borrar.");
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        int modificar = jTable1.getSelectedRow();
    
    if (modificar > -1) {
        libroSeleccionado = ProyectoPichardo.getLibros().get(modificar); // Guarda el libro seleccionado

        jTextField1.setText(libroSeleccionado.titulo);
        jTextField2.setText(libroSeleccionado.autor);
        jTextField3.setText(String.valueOf(libroSeleccionado.precio));
        jTextField4.setText(String.valueOf(libroSeleccionado.stock));
        jComboBox1.setSelectedItem(libroSeleccionado.genero);
    } else {
        JOptionPane.showMessageDialog(this, "Seleccione un libro para modificar.");
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        if (libroSeleccionado != null) {
        // Guardar los nuevos valores en el libro seleccionado
        libroSeleccionado.titulo = jTextField1.getText();
        libroSeleccionado.autor = jTextField2.getText();
        libroSeleccionado.precio = Double.parseDouble(jTextField3.getText());
        libroSeleccionado.stock = Integer.parseInt(jTextField4.getText());
        libroSeleccionado.genero = jComboBox1.getSelectedItem().toString();

        // Actualizar la tabla después de guardar los cambios
        pintarTabla();
        JOptionPane.showMessageDialog(this, "Libro actualizado correctamente.");
        
        // Limpiar la selección después de actualizar
        libroSeleccionado = null; 
    } else {
        JOptionPane.showMessageDialog(this, "No hay libro seleccionado para modificar.");
    }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        int filaSeleccionada = jTable1.getSelectedRow();

    if (filaSeleccionada >= 0) {
        Libros libroSeleccionado = ProyectoPichardo.getLibros().get(filaSeleccionada);

        // Verificar si ya está en librosv
        boolean yaExiste = false;
        for (LibroV lv : ProyectoPichardo.getLibrosv()) {
            if (lv.titulo.equalsIgnoreCase(libroSeleccionado.titulo)) {
                yaExiste = true;
                break;
            }
        }

        if (yaExiste) {
            JOptionPane.showMessageDialog(this, "Este libro ya está en la lista de libros para venta.");
        } else {
            // Agregar a LibrosV sin reducir stock
            LibroV nuevo = new LibroV();
            nuevo.titulo = libroSeleccionado.titulo;
            nuevo.precio = libroSeleccionado.precio;
            nuevo.stock = libroSeleccionado.stock;

            ProyectoPichardo.getLibrosv().add(nuevo);

            JOptionPane.showMessageDialog(this, "Libro agregado para venta correctamente.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Seleccione un libro del inventario.");
    }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
          LecturaLibros.cargarLibrosDesdeCSV();
    pintarTabla(); // Actualiza la tabla con los nuevos libros
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Guardar libros como archivo CSV");

    int seleccion = fileChooser.showSaveDialog(this);

    if (seleccion == JFileChooser.APPROVE_OPTION) {
        File archivo = fileChooser.getSelectedFile();

        try (PrintWriter writer = new PrintWriter(new FileWriter(archivo))) {
            // ✅ Encabezados incluyendo fecha
            writer.println("titulo|autor|genero|precio|stock|fecha");

            // ✅ Formato de fecha
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

            for (Libros libro : ProyectoPichardo.getLibros()) {
                String fechaTexto = libro.fecha != null ? sdf.format(libro.fecha.getTime()) : "";
                String linea = libro.titulo + "|" + libro.autor + "|" + libro.genero + "|" +
                               libro.precio + "|" + libro.stock + "|" + fechaTexto;
                writer.println(linea);
            }

            JOptionPane.showMessageDialog(this, "Libros exportados correctamente a:\n" + archivo.getAbsolutePath());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al guardar el archivo: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
