/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyectopichardo;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author oem
 */
public class HacerVenta extends javax.swing.JFrame {

    /**
     * Creates new form HacerVenta
     */
    public HacerVenta() {
        initComponents();

        // Limpiar los Items del ComboBox
        jComboBox1.removeAllItems();

        // Llenar ComboBox con libros disponibles
        for (LibroV libro : ProyectoPichardo.getLibrosv()) {
            jComboBox1.addItem(libro.titulo);
        }
// Inicializar ComboBox de cupones
        jComboBox2.removeAllItems();
        jComboBox2.addItem("Sin cupón"); // Agrega esta opción predeterminada
        for (Cupon c : ProyectoPichardo.getCupones()) {
            jComboBox2.addItem("Código: " + c.codigo + " Valor: " + c.valor + " Tipo: " + c.tipo);
        }

        // Configurar columnas del JTable
        DefaultTableModel modelo = new DefaultTableModel();
        modelo.addColumn("Título");
        modelo.addColumn("Precio");
        modelo.addColumn("Cantidad"); // La cantidad siempre será 1 cada vez que selecciones
        jTable1.setModel(modelo);

        // Escuchar selección del ComboBox
        jComboBox1.addActionListener(e -> agregarLibroAVenta());
    }

    public javax.swing.JComboBox<String> getComboBoxLibros() {
        return jComboBox1;
    }

    public void actualizarComboBox() {
        jComboBox1.removeAllItems();
        for (LibroV libro : ProyectoPichardo.getLibrosv()) {
            jComboBox1.addItem(libro.titulo);
        }
    }

    private void agregarLibroAVenta() {
        String tituloSeleccionado = (String) jComboBox1.getSelectedItem();

        if (tituloSeleccionado == null) {
            return;
        }

        for (LibroV libro : ProyectoPichardo.getLibrosv()) {
            if (libro.titulo.equalsIgnoreCase(tituloSeleccionado)) {
                if (libro.stock > 0) {
                    DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
                    modelo.addRow(new Object[]{libro.titulo, libro.precio, 1});
                    libro.stock--;

                    JOptionPane.showMessageDialog(this, "Quedan " + libro.stock + " unidades de " + libro.titulo);

                    if (libro.stock == 0) {
                        JOptionPane.showMessageDialog(this, "Ya no hay stock de " + libro.titulo);
                    }

                    // También reducir en el inventario
                    for (Libros lib : ProyectoPichardo.getLibros()) {
                        if (lib.titulo.equalsIgnoreCase(libro.titulo)) {
                            lib.stock--;
                            break;
                        }
                    }

                    break;
                } else {
                    JOptionPane.showMessageDialog(this, "Ya no hay stock de " + libro.titulo);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("cerrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Escoger Libros");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton2.setText("Hacer venta");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Escoger Cupon");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton3.setText("Exportar ventas a CSV");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Exportar Libros vendidos a CSV");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Cargar JSON a Ventas");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Cargar Ventas a JSON");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("Exportar CSV a Ventas");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Exportar Ventas a XML");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setText("Cargar XML a Ventas");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton10.setText("Exportar Libros vendidos a XML");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Exportar Libros vendidos a JSON");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(49, 49, 49)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 779, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2)
                            .addComponent(jButton3)
                            .addComponent(jButton5)
                            .addComponent(jButton6)
                            .addComponent(jButton7)
                            .addComponent(jButton8)
                            .addComponent(jButton9)
                            .addComponent(jButton10)
                            .addComponent(jButton11)
                            .addComponent(jButton4))
                        .addGap(46, 46, 46))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton1)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(9, 9, 9)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton9)
                        .addGap(4, 4, 4)
                        .addComponent(jButton10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (jTable1.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "No hay libros en la venta.");
            return;
        }

        String nombreCliente = JOptionPane.showInputDialog(this, "Ingrese el nombre del cliente:");
        String nitCliente = JOptionPane.showInputDialog(this, "Ingrese el NIT del cliente:");
        String direccionCliente = JOptionPane.showInputDialog(this, "Ingrese la dirección del cliente:");

        if (nombreCliente == null || nitCliente == null || direccionCliente == null) {
            JOptionPane.showMessageDialog(this, "Venta cancelada.");
            return;
        }

        double totalConIVA = 0;
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            double precio = (double) jTable1.getValueAt(i, 1);
            totalConIVA += precio;
        }

        // Obtener cupón seleccionado
        String seleccion = (String) jComboBox2.getSelectedItem();
        double descuento = 0;
        String detalleCupon = "Sin cupón";

        if (seleccion != null && !seleccion.equals("Sin cupón")) {
            for (Cupon c : ProyectoPichardo.getCupones()) {
                String etiqueta = "Código: " + c.codigo + " Valor: " + c.valor + " Tipo: " + c.tipo;
                if (etiqueta.equals(seleccion)) {
                    detalleCupon = etiqueta;
                    if (c.tipo.equalsIgnoreCase("Porcentual")) {
                        double porcentaje = Double.parseDouble(c.valor);
                        descuento = totalConIVA * (porcentaje / 100);
                    } else if (c.tipo.equalsIgnoreCase("Monto fijo")) {
                        descuento = Double.parseDouble(c.valor);
                    }
                    break;
                }
            }
        }

        totalConIVA -= descuento;
        totalConIVA = Math.round(totalConIVA * 100.0) / 100.0;
        double totalSinIVA = Math.round((totalConIVA / 1.12) * 100.0) / 100.0;

        String nombreVendedor = ProyectoPichardo.getUsuarioActual().getNombre();
        Calendar fecha = Calendar.getInstance();
        // Crear y guardar la venta
        Venta nueva = new Venta();
        nueva.nombre = nombreCliente;
        nueva.nit = nitCliente;
        nueva.direccion = direccionCliente;
        nueva.total = totalConIVA;
        nueva.vendedor = nombreVendedor;
        nueva.fecha = fecha;

// Guardar los libros vendidos en la venta
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            LibroV libro = new LibroV();
            libro.titulo = (String) jTable1.getValueAt(i, 0);
            libro.precio = (double) jTable1.getValueAt(i, 1);
            libro.stock = (int) jTable1.getValueAt(i, 2);
            nueva.librosVendidos.add(libro);
        }

        ProyectoPichardo.getVentas().add(nueva);

        String factura = "Factura\n\n"
                + "Nombre: " + nombreCliente + "\n"
                + "NIT: " + nitCliente + "\n"
                + "Dirección: " + direccionCliente + "\n"
                + "Vendedor: " + nombreVendedor + "\n"
                + "Fecha: " + fecha.getTime().toString() + "\n"
                + "Total sin IVA: Q" + totalSinIVA + "\n"
                + "Cupón aplicado: " + detalleCupon + "\n"
                + "Descuento aplicado: Q" + Math.round(descuento * 100.0) / 100.0 + "\n"
                + "Total con IVA: Q" + totalConIVA;

        JOptionPane.showMessageDialog(this, factura);

        // Limpiar tabla
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        modelo.setRowCount(0);

        // Restaurar selección de cupón
        jComboBox2.setSelectedIndex(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Guardar informe de ventas");

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File archivo = fileChooser.getSelectedFile();

            try (PrintWriter writer = new PrintWriter(new FileWriter(archivo))) {
                // Escribir encabezados
                writer.println("Nombre,NIT,Dirección,Vendedor,Fecha,Total sin IVA,Descuento,Total con IVA");

                // Escribir cada venta
                for (Venta venta : ProyectoPichardo.getVentas()) {
                    double totalConIVA = venta.total;
                    double totalSinIVA = Math.round((totalConIVA / 1.12) * 100.0) / 100.0;
                    double descuento = Math.round((totalSinIVA * 0.12) * 100.0) / 100.0;

                    writer.println(
                            venta.nombre + ","
                            + venta.nit + ","
                            + venta.direccion + ","
                            + venta.vendedor + ","
                            + venta.fecha.getTime().toString() + ","
                            + totalSinIVA + ","
                            + descuento + ","
                            + totalConIVA
                    );
                }

                writer.flush();
                JOptionPane.showMessageDialog(this, "Ventas exportadas exitosamente.");
            } catch (IOException ex) {
                Logger.getLogger(HacerVenta.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Guardar reporte de libros vendidos");

    int seleccion = fileChooser.showSaveDialog(this);

    if (seleccion == JFileChooser.APPROVE_OPTION) {
        File archivo = fileChooser.getSelectedFile();

        try (PrintWriter writer = new PrintWriter(archivo)) {
            int contadorVenta = 1;

            for (Venta venta : ProyectoPichardo.getVentas()) {
                writer.println("Venta " + contadorVenta);
                writer.println("Fecha: " + venta.fecha.getTime().toString());
                writer.println("Título|Cantidad|Precio");

                for (LibroV libro : venta.librosVendidos) {
                    writer.println(libro.titulo + "|" + libro.stock + "|" + libro.precio);
                }

                writer.println(); // Línea vacía entre ventas
                contadorVenta++;
            }

            JOptionPane.showMessageDialog(this, "Reporte exportado correctamente.");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al escribir el archivo: " + ex.getMessage());
        }
    }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
         LecturaVentasJSON.cargarVentasDesdeJSON();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        LecturaVentasJSON.guardarVentasComoJSON();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        LecturaVentasCSV.cargarVentasDesdeCSV();
        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        LecturaVentasXML.exportarVentasAXML();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        LecturaVentasXML.cargarVentasDesdeXML();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Guardar libros vendidos en XML");

    int seleccion = fileChooser.showSaveDialog(this);
    if (seleccion == JFileChooser.APPROVE_OPTION) {
        File archivo = fileChooser.getSelectedFile();

        try (PrintWriter writer = new PrintWriter(archivo)) {
            writer.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
            writer.println("<ventas>");

            for (int i = 0; i < ProyectoPichardo.getVentas().size(); i++) {
                Venta venta = ProyectoPichardo.getVentas().get(i);
                writer.println("  <venta>");
                writer.println("    <fecha>" + venta.fecha.getTime().toString() + "</fecha>");

                for (LibroV libro : venta.librosVendidos) {
                    writer.println("    <libro>");
                    writer.println("      <titulo>" + libro.titulo + "</titulo>");
                    writer.println("      <cantidad>" + libro.stock + "</cantidad>");
                    writer.println("      <precio>" + libro.precio + "</precio>");
                    writer.println("    </libro>");
                }

                writer.println("  </venta>");
            }

            writer.println("</ventas>");
            JOptionPane.showMessageDialog(this, "Exportado a XML exitosamente.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al escribir XML: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Guardar libros vendidos en JSON");

    int seleccion = fileChooser.showSaveDialog(this);
    if (seleccion == JFileChooser.APPROVE_OPTION) {
        File archivo = fileChooser.getSelectedFile();

        JSONArray ventasArray = new JSONArray();

        for (Venta venta : ProyectoPichardo.getVentas()) {
            JSONObject ventaJSON = new JSONObject();
            ventaJSON.put("fecha", venta.fecha.getTime().toString());

            JSONArray librosArray = new JSONArray();
            for (LibroV libro : venta.librosVendidos) {
                JSONObject libroJSON = new JSONObject();
                libroJSON.put("titulo", libro.titulo);
                libroJSON.put("cantidad", libro.stock);
                libroJSON.put("precio", libro.precio);
                librosArray.put(libroJSON);
            }

            ventaJSON.put("libros", librosArray);
            ventasArray.put(ventaJSON);
        }

        try (PrintWriter writer = new PrintWriter(archivo)) {
            writer.write(ventasArray.toString(4)); // Con indentación bonita
            JOptionPane.showMessageDialog(this, "Exportado a JSON exitosamente.");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Error al escribir JSON: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_jButton11ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
